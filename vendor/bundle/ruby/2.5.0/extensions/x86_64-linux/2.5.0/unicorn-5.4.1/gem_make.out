current directory: /home/ec2-user/environment/toreka/vendor/bundle/ruby/2.5.0/gems/unicorn-5.4.1/ext/unicorn_http
/home/ec2-user/.rvm/rubies/ruby-2.5.1/bin/ruby -I /home/ec2-user/.rvm/rubies/ruby-2.5.1/lib/ruby/site_ruby/2.5.0 -r ./siteconf20210112-13289-1f34jcu.rb extconf.rb
checking for SIZEOF_OFF_T in ruby.h... yes
checking for SIZEOF_SIZE_T in ruby.h... yes
checking for SIZEOF_LONG in ruby.h... yes
checking for rb_str_set_len() in ruby.h... yes
checking for rb_hash_clear() in ruby.h... yes
checking for gmtime_r() in time.h... yes
creating Makefile

current directory: /home/ec2-user/environment/toreka/vendor/bundle/ruby/2.5.0/gems/unicorn-5.4.1/ext/unicorn_http
make "DESTDIR=" clean

current directory: /home/ec2-user/environment/toreka/vendor/bundle/ruby/2.5.0/gems/unicorn-5.4.1/ext/unicorn_http
make "DESTDIR="
compiling httpdate.c
compiling unicorn_http.c
unicorn_http.c: In function ‘http_parser_execute’:
unicorn_http.rl:293:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:295:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.rl:302:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   }
     ^
unicorn_http.rl:304:1: note: here
   action request_uri {
 ^ ~~
unicorn_http.rl:293:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:295:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.rl:321:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     rb_hash_aset(hp->env, g_fragment, STR_NEW(mark, fpc));
     ^
unicorn_http.rl:323:1: note: here
   action start_query {MARK(start.query, fpc); }
 ^ ~~
unicorn_http.rl:293:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:295:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:581:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:583:1: note: here
 case 7:
 ^~~~
unicorn_http.c:588:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:590:1: note: here
 case 8:
 ^~~~
unicorn_http.c:595:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:597:1: note: here
 case 9:
 ^~~~
unicorn_http.c:602:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:604:1: note: here
 case 10:
 ^~~~
unicorn_http.c:609:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:611:1: note: here
 case 11:
 ^~~~
unicorn_http.c:618:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:620:1: note: here
 case 12:
 ^~~~
unicorn_http.c:625:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:627:1: note: here
 case 13:
 ^~~~
unicorn_http.rl:300:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action scheme {
     ^
unicorn_http.rl:302:1: note: here
   }
 ^ ~ 
unicorn_http.rl:299:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
     ^
unicorn_http.rl:301:1: note: here
     rb_hash_aset(hp->env, g_rack_url_scheme, STR_NEW(mark, fpc));
 ^   
unicorn_http.rl:299:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
     ^
unicorn_http.rl:301:1: note: here
     rb_hash_aset(hp->env, g_rack_url_scheme, STR_NEW(mark, fpc));
 ^   
unicorn_http.rl:300:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action scheme {
     ^
unicorn_http.rl:302:1: note: here
   }
 ^ ~ 
unicorn_http.rl:321:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     rb_hash_aset(hp->env, g_fragment, STR_NEW(mark, fpc));
     ^
unicorn_http.rl:323:1: note: here
   action start_query {MARK(start.query, fpc); }
 ^ ~~
unicorn_http.rl:296:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action start_value { MARK(mark, fpc); }
     ^
unicorn_http.rl:298:1: note: here
   action write_cont_value { write_cont_value(hp, buffer, fpc); }
 ^ ~~
unicorn_http.rl:298:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_cont_value { write_cont_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:300:1: note: here
   action scheme {
 ^ ~~
unicorn_http.rl:299:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
     ^
unicorn_http.rl:301:1: note: here
     rb_hash_aset(hp->env, g_rack_url_scheme, STR_NEW(mark, fpc));
 ^   
unicorn_http.rl:321:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     rb_hash_aset(hp->env, g_fragment, STR_NEW(mark, fpc));
     ^
unicorn_http.rl:323:1: note: here
   action start_query {MARK(start.query, fpc); }
 ^ ~~
unicorn_http.rl:293:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:295:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.rl:293:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:295:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:1361:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1363:1: note: here
 case 25:
 ^~~~
unicorn_http.rl:293:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:295:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:1399:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1401:1: note: here
 case 27:
 ^~~~
unicorn_http.c:1412:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1414:1: note: here
 case 28:
 ^~~~
unicorn_http.rl:341:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     if (hp->len.chunk < 0)
     ^
unicorn_http.rl:343:1: note: here
   }
 ^ ~ 
unicorn_http.rl:326:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     rb_hash_aset(hp->env, g_query_string, STR_NEW(start.query, fpc));
     ^
unicorn_http.rl:328:1: note: here
   action http_version { http_version(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:326:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     rb_hash_aset(hp->env, g_query_string, STR_NEW(start.query, fpc));
     ^
unicorn_http.rl:328:1: note: here
   action http_version { http_version(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.c:1488:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1490:1: note: here
 case 32:
 ^~~~
unicorn_http.rl:297:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:299:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:297:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:299:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:297:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:299:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:297:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:299:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:305:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     VALUE str;
     ^
unicorn_http.rl:307:1: note: here
     VALIDATE_MAX_URI_LENGTH(LEN(mark, fpc), REQUEST_URI);
 ^   
unicorn_http.c:1574:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1576:1: note: here
 case 38:
 ^~~~
unicorn_http.c:1581:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1583:1: note: here
 case 39:
 ^~~~
unicorn_http.c:1611:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1613:1: note: here
 case 40:
 ^~~~
unicorn_http.c:1631:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1633:1: note: here
 case 41:
 ^~~~
unicorn_http.c:1644:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1646:1: note: here
 case 42:
 ^~~~
unicorn_http.rl:293:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:295:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:1693:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1695:1: note: here
 case 44:
 ^~~~
unicorn_http.rl:293:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:295:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:1750:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1752:1: note: here
 case 46:
 ^~~~
unicorn_http.c:1780:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1782:1: note: here
 case 47:
 ^~~~
unicorn_http.rl:297:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:299:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.c:1813:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1815:1: note: here
 case 49:
 ^~~~
unicorn_http.c:1841:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1843:1: note: here
 case 50:
 ^~~~
unicorn_http.c:1869:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1871:1: note: here
 case 51:
 ^~~~
unicorn_http.c:1897:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1899:1: note: here
 case 52:
 ^~~~
unicorn_http.c:1925:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1927:1: note: here
 case 53:
 ^~~~
unicorn_http.c:1953:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1955:1: note: here
 case 54:
 ^~~~
unicorn_http.c:1981:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1983:1: note: here
 case 55:
 ^~~~
unicorn_http.c:2009:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2011:1: note: here
 case 56:
 ^~~~
unicorn_http.c:2037:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2039:1: note: here
 case 57:
 ^~~~
unicorn_http.c:2065:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2067:1: note: here
 case 58:
 ^~~~
unicorn_http.c:2093:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2095:1: note: here
 case 59:
 ^~~~
unicorn_http.c:2121:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2123:1: note: here
 case 60:
 ^~~~
unicorn_http.c:2149:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2151:1: note: here
 case 61:
 ^~~~
unicorn_http.c:2177:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2179:1: note: here
 case 62:
 ^~~~
unicorn_http.c:2205:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2207:1: note: here
 case 63:
 ^~~~
unicorn_http.c:2233:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2235:1: note: here
 case 64:
 ^~~~
unicorn_http.c:2261:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2263:1: note: here
 case 65:
 ^~~~
unicorn_http.c:2289:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2291:1: note: here
 case 66:
 ^~~~
unicorn_http.c:2317:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2319:1: note: here
 case 67:
 ^~~~
unicorn_http.rl:293:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:295:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:2358:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2360:1: note: here
 case 69:
 ^~~~
unicorn_http.c:2387:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2389:1: note: here
 case 70:
 ^~~~
unicorn_http.rl:302:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   }
     ^
unicorn_http.rl:304:1: note: here
   action request_uri {
 ^ ~~
unicorn_http.rl:293:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:295:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.rl:321:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     rb_hash_aset(hp->env, g_fragment, STR_NEW(mark, fpc));
     ^
unicorn_http.rl:323:1: note: here
   action start_query {MARK(start.query, fpc); }
 ^ ~~
unicorn_http.rl:293:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:295:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.rl:293:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:295:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:2596:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2598:1: note: here
 case 76:
 ^~~~
unicorn_http.rl:293:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:295:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:2636:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2638:1: note: here
 case 78:
 ^~~~
unicorn_http.c:2649:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2651:1: note: here
 case 79:
 ^~~~
unicorn_http.rl:341:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     if (hp->len.chunk < 0)
     ^
unicorn_http.rl:343:1: note: here
   }
 ^ ~ 
unicorn_http.rl:326:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     rb_hash_aset(hp->env, g_query_string, STR_NEW(start.query, fpc));
     ^
unicorn_http.rl:328:1: note: here
   action http_version { http_version(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:326:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     rb_hash_aset(hp->env, g_query_string, STR_NEW(start.query, fpc));
     ^
unicorn_http.rl:328:1: note: here
   action http_version { http_version(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.c:2729:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2731:1: note: here
 case 83:
 ^~~~
unicorn_http.rl:297:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:299:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:297:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:299:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:297:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:299:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:297:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:299:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:305:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     VALUE str;
     ^
unicorn_http.rl:307:1: note: here
     VALIDATE_MAX_URI_LENGTH(LEN(mark, fpc), REQUEST_URI);
 ^   
unicorn_http.c:2815:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2817:1: note: here
 case 89:
 ^~~~
unicorn_http.c:2822:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2824:1: note: here
 case 90:
 ^~~~
unicorn_http.c:2852:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2854:1: note: here
 case 91:
 ^~~~
unicorn_http.c:2872:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2874:1: note: here
 case 92:
 ^~~~
unicorn_http.c:2885:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2887:1: note: here
 case 93:
 ^~~~
unicorn_http.rl:293:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:295:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:2934:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2936:1: note: here
 case 95:
 ^~~~
unicorn_http.rl:293:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:295:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:2991:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2993:1: note: here
 case 97:
 ^~~~
unicorn_http.c:3021:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3023:1: note: here
 case 98:
 ^~~~
unicorn_http.rl:297:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:299:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.c:3054:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3056:1: note: here
 case 100:
 ^~~~
unicorn_http.rl:346:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 
     ^
unicorn_http.rl:348:1: note: here
     if (HP_FL_TEST(hp, HASBODY)) {
 ^   
unicorn_http.c:3113:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3115:1: note: here
 case 102:
 ^~~~
unicorn_http.rl:346:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 
     ^
unicorn_http.rl:348:1: note: here
     if (HP_FL_TEST(hp, HASBODY)) {
 ^   
unicorn_http.rl:394:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 }%%
     ^
unicorn_http.rl:396:1: note: here
 /** Data **/
 ^~~~
unicorn_http.c:3181:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3183:1: note: here
 case 106:
 ^~~~
unicorn_http.c:3188:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3190:1: note: here
 case 107:
 ^~~~
unicorn_http.c:3195:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3197:1: note: here
 case 108:
 ^~~~
unicorn_http.c:3227:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3229:1: note: here
 case 109:
 ^~~~
unicorn_http.c:3258:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3260:1: note: here
 case 110:
 ^~~~
unicorn_http.c:3288:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3290:1: note: here
 case 111:
 ^~~~
unicorn_http.c:3320:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3322:1: note: here
 case 112:
 ^~~~
unicorn_http.c:3351:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3353:1: note: here
 case 113:
 ^~~~
unicorn_http.rl:300:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action scheme {
     ^
unicorn_http.rl:302:1: note: here
   }
 ^ ~ 
unicorn_http.rl:299:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
     ^
unicorn_http.rl:301:1: note: here
     rb_hash_aset(hp->env, g_rack_url_scheme, STR_NEW(mark, fpc));
 ^   
unicorn_http.rl:299:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
     ^
unicorn_http.rl:301:1: note: here
     rb_hash_aset(hp->env, g_rack_url_scheme, STR_NEW(mark, fpc));
 ^   
unicorn_http.rl:300:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action scheme {
     ^
unicorn_http.rl:302:1: note: here
   }
 ^ ~ 
unicorn_http.c:3513:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3515:1: note: here
 case 118:
 ^~~~
unicorn_http.rl:296:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action start_value { MARK(mark, fpc); }
     ^
unicorn_http.rl:298:1: note: here
   action write_cont_value { write_cont_value(hp, buffer, fpc); }
 ^ ~~
unicorn_http.rl:298:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_cont_value { write_cont_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:300:1: note: here
   action scheme {
 ^ ~~
unicorn_http.rl:299:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
     ^
unicorn_http.rl:301:1: note: here
     rb_hash_aset(hp->env, g_rack_url_scheme, STR_NEW(mark, fpc));
 ^   
At top level:
unicorn_http.c:303:18: warning: ‘http_parser_en_main’ defined but not used [-Wunused-const-variable=]
 static const int http_parser_en_main = 1;
                  ^~~~~~~~~~~~~~~~~~~
unicorn_http.c:301:18: warning: ‘http_parser_en_ChunkedBody_chunk_chunk_end’ defined but not used [-Wunused-const-variable=]
 static const int http_parser_en_ChunkedBody_chunk_chunk_end = 105;
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: warning: unrecognized command line option ‘-Wno-self-assign’
cc1: warning: unrecognized command line option ‘-Wno-constant-logical-operand’
cc1: warning: unrecognized command line option ‘-Wno-parentheses-equality’
linking shared-object unicorn_http.so

current directory: /home/ec2-user/environment/toreka/vendor/bundle/ruby/2.5.0/gems/unicorn-5.4.1/ext/unicorn_http
make "DESTDIR=" install
/usr/bin/install -c -m 0755 unicorn_http.so ./.gem.20210112-13289-1e1g0zr
